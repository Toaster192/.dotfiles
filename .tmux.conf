#################
#  TMUX CONFIG  #
#################

# set prefix
unbind-key           C-b
set-option -g prefix C-b
bind-key             C-b send-prefix

# use vi keys
set-option -gw mode-keys vi

# set bigger history limit
set-option -g history-limit 1000000

# so you don't end up with window numbers like: 0 1 4 5 6
set-option -g renumber-windows on

# mouse support
set-window-option -g mouse on

# 256 color support
set-option -g  default-terminal   "tmux-256color"
set-option -ga terminal-overrides "xterm-kitty:Tc,xterm-256color:Tc"
set-option -ga terminal-overrides ",*col*:Tc"

# start window numbers from 1
set-option -g base-index 1

# set escape time so vim is responsive inside tmux
set-option -g escape-time 1

# # pane border status, if more than one pane
# set-option -g pane-border-status top
# set-hook -g 'after-new-window'   'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
# set-hook -g 'after-kill-pane'    'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
# set-hook -g 'pane-exited'        'run-shell -b "if [ \#{window_panes} -eq 1 ]; then tmux set pane-border-status off; fi"'
# set-hook -g 'after-split-window' 'run-shell -b "if [ \#{window_panes} -gt 1 ]; then tmux set pane-border-status top; fi"'

# reload tmux config
bind-key r source-file ~/.tmux.conf \; display "Reloaded ~/.tmux.conf"

# kill session / window
bind-key Z kill-session
bind-key X kill-window

# unbind navigation key conflicts
unbind-key K
unbind-key L

# open map page
bind-key C-m command-prompt "split-window -h 'man %%'"

# open git log (or dotfiles log if not available)
bind-key C-g split-window -h -f -d -c "#{pane_current_path}" "git lg || ([[ $? -ne 141 ]] && dotfiles lg)"
bind-key g   respawn-pane -t "{right}" -k "git lg || ([[ $? -ne 141 ]] && dotfiles lg)"
bind-key C-o split-window -h -f -d -c "#{pane_current_path}" "git lgo || ([[ $? -ne 141 ]] && dotfiles lgo)"
bind-key o   respawn-pane -t "{right}" -k "git lgo || ([[ $? -ne 141 ]] && dotfiles lgo)"
bind-key C-q kill-pane    -t "{right}"

# make new panes and windows use the pwd
bind-key C-v split-window -h -c "#{pane_current_path}"
bind-key v   split-window -h
bind-key C-x split-window -v -c "#{pane_current_path}"
bind-key x   split-window -v
bind-key C-u split-window -v -l 3 -c "#{pane_current_path}"
bind-key C-c new-window   -a -c "#{pane_current_path}"
bind-key c   new-window

# smart pane switching with awareness of vim splits
# makes ctrl-j and ctrl-k navigate fzf search results when fzf active in pane
# providing the same behavior as ctrl-j and ctrl-k when navigating ctrl-p
# results inside vim.

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"

# switch panes
bind-key -n C-h      if-shell "$is_vim || $is_fzf" "send-keys C-h"  "select-pane -L"
bind-key -n C-j      if-shell "$is_vim || $is_fzf" "send-keys C-j"  "select-pane -D"
bind-key -n C-k      if-shell "$is_vim || $is_fzf" "send-keys C-k"  "select-pane -U"
bind-key -n C-l      if-shell "$is_vim || $is_fzf" "send-keys C-l"  "select-pane -R"
bind-key -n C-BSpace if-shell "$is_vim || $is_fzf" "send-keys C-\\" "select-pane -l"

# switch panes (copy-mode)
bind-key -T copy-mode-vi C-h      if-shell "$is_vim || $is_fzf" "send-keys C-h"  "select-pane -L"
bind-key -T copy-mode-vi C-j      if-shell "$is_vim || $is_fzf" "send-keys C-j"  "select-pane -D"
bind-key -T copy-mode-vi C-k      if-shell "$is_vim || $is_fzf" "send-keys C-k"  "select-pane -U"
bind-key -T copy-mode-vi C-l      if-shell "$is_vim || $is_fzf" "send-keys C-l"  "select-pane -R"
bind-key -T copy-mode-vi C-BSpace if-shell "$is_vim || $is_fzf" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode    C-h      if-shell "$is_vim || $is_fzf" "send-keys C-h"  "select-pane -L"
bind-key -T copy-mode    C-j      if-shell "$is_vim || $is_fzf" "send-keys C-j"  "select-pane -D"
bind-key -T copy-mode    C-k      if-shell "$is_vim || $is_fzf" "send-keys C-k"  "select-pane -U"
bind-key -T copy-mode    C-l      if-shell "$is_vim || $is_fzf" "send-keys C-l"  "select-pane -R"
bind-key -T copy-mode    C-BSpace if-shell "$is_vim || $is_fzf" "send-keys C-\\" "select-pane -l"

# fallback
bind-key C-h      select-pane -L
bind-key C-j      select-pane -D
bind-key C-k      select-pane -U
bind-key C-l      select-pane -R
bind-key C-BSpace select-pane -l

# resize panes
bind-key h resize-pane -L 5
bind-key l resize-pane -R 5
bind-key j resize-pane -D 5
bind-key k resize-pane -U 5

# resize panes
bind-key h resize-pane -L 5
bind-key l resize-pane -R 5
bind-key j resize-pane -D 5
bind-key k resize-pane -U 5

# switch windows
bind-key -n M-h previous-window
bind-key -n M-l next-window

# swap windows
bind-key M-h swap-window -t -1
bind-key M-l swap-window -t +1

# copy and paste
bind-key C-y copy-mode
bind-key y   copy-mode
bind-key p   paste-buffer

# copy mode bindings
bind-key -T copy-mode-vi v                 send-keys -X begin-selection
bind-key -T copy-mode-vi C-v               send-keys -X rectangle-toggle
bind-key -T copy-mode-vi Space             send-keys -X clear-selection
bind-key -T copy-mode-vi d                 send-keys -X halfpage-down
bind-key -T copy-mode-vi u                 send-keys -X halfpage-up
bind-key -T copy-mode-vi y                 send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
bind-key -T copy-mode-vi Enter             send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe            "xclip -in -selection primary"
bind-key -T copy-mode-vi Escape            send-keys -X cancel
bind-key -T copy-mode-vi q                 send-keys -X cancel

# scroll speed
bind-key -T copy-mode-vi WheelUpPane send -N 1 -X scroll-up
bind-key -T copy-mode-vi WheelDownPane send -N 1 -X scroll-down
bind-key -T copy-mode    WheelUpPane send -N 1 -X scroll-up
bind-key -T copy-mode    WheelDownPane send -N 1 -X scroll-down

# save buffer to file
bind-key P command-prompt -p 'Save history to filename:' -I '~/.tmux_history' 'capture-pane -S - -E - ; save-buffer %1 ; delete-buffer'

# display panes
bind-key C-d display-panes

# toggle status bar
bind-key C-s set-option status

# toggle pane border status
bind-key C-t set-option -g pane-border-status

# toggle synchronize
bind-key ^ set-window-option synchronize-panes

# source .tmux file
bind-key S source-file .tmux

# status bar redraw interval
set-option -g status-interval 5

# wrap search
set-option -g wrap-search on


###############
#  STATUSBAR  #
###############

# COLORSCHEME: gruvbox dark
set-option -g status "on"

# default statusbar colors
set-option -g status-bg colour237
set-option -g status-fg colour223

# default window title colors
set-window-option -g window-status-bg colour246
set-window-option -g window-status-fg colour237

set-window-option -g window-status-activity-bg colour237
set-window-option -g window-status-activity-fg colour248

# active window title colors
set-window-option -g window-status-current-bg default
set-window-option -g window-status-current-fg colour237

# pane border
set-option -g pane-active-border-style fg=colour237,bg=colour235
set-option -g pane-border-style        fg=colour237,bg=colour235

# message infos
set-option -g message-bg colour239
set-option -g message-fg colour223

# writting commands inactive
set-option -g message-command-bg colour239
set-option -g message-command-fg colour223

# pane number display
set-option -g display-panes-active-colour colour250
set-option -g display-panes-colour        colour237

# clock
set-window-option -g clock-mode-colour colour246

# bell
set-window-option -g window-status-bell-style fg=colour235,bg=colour167

# pane border
#set-option -g pane-border-format " #P: #{pane_current_command} "
set-option -g pane-border-format "#{?pane_active, #[fg=colour167]● ,─}"

# theme set-optiontings mixed with colors (unfortunately, but there is no cleaner way)
set-option -g        status-attr                 "none"
set-option -g        status-justify              "left"
set-option -g        status-left-attr            "none"
set-option -g        status-left-length          "80"
set-option -g        status-right-attr           "none"
set-option -g        status-right-length         "80"
set-window-option -g window-status-activity-attr "none"
set-window-option -g window-status-attr          "none"
set-window-option -g window-status-separator     ""

# Powerline
set-option -g status-left "#[fg=colour246, bg=colour239] #S #[fg=colour239, bg=colour237, nobold, noitalics, nounderscore]"
#set-option -g status-right "#[fg=colour239, bg=colour237, nobold, nounderscore, noitalics]#[fg=colour246, bg=colour239] %d.%m.%Y  %H:%M #[fg=colour246, bg=colour239, nobold, noitalics, nounderscore]#[fg=colour235, bg=colour246, bold] #h "
#set-option -g status-right "#[fg=colour239, bg=colour237, nobold, nounderscore, noitalics]#[fg=colour246, bg=colour239] #{pane_current_path} #[fg=colour246, bg=colour239, nobold, noitalics, nounderscore]#[fg=colour235, bg=colour246] $USER@#h "
set-option -g status-right "#{?pane_dead,dead ,}#{?window_zoomed_flag,zoom ,}#{?pane_synchronized,sync ,}#[fg=colour239, bg=colour237, nobold, nounderscore, noitalics]#[fg=colour246, bg=colour239] #(show-short-dir \"#{pane_current_path}\" \"#{client_width}\") #[fg=colour246, bg=colour239, nobold, noitalics, nounderscore]#[fg=colour235, bg=colour246] $USER@#h "

# Powerline (current)
set-window-option -g window-status-current-format "#[fg=colour237, bg=colour246, nobold, noitalics, nounderscore]#[fg=colour235, bg=colour246] #I #[fg=colour235, bg=colour246, bold] #W #[fg=colour246, bg=colour237, nobold, noitalics, nounderscore]"
set-window-option -g window-status-format         "#[fg=colour237, bg=colour239, nobold, noitalics, nounderscore]#[fg=colour246,bg=colour239] #I #[fg=colour246, bg=colour239] #W #[fg=colour239, bg=colour237, noitalics]"

# # Straight
# set-option -g status-left "#[fg=colour246, bg=colour239] #S #[fg=colour239, bg=colour237, nobold, noitalics, nounderscore]▌"
# #set-option -g status-right "#[fg=colour239, bg=colour237, nobold, nounderscore, noitalics]▐#[fg=colour246, bg=colour239] %d.%m.%Y │ %H:%M #[fg=colour246, bg=colour239, nobold, noitalics, nounderscore]▐#[fg=colour235, bg=colour246, bold] #h "
# #set-option -g status-right "#[fg=colour239, bg=colour237, nobold, nounderscore, noitalics]▐#[fg=colour246, bg=colour239] #{pane_current_path} #[fg=colour246, bg=colour239, nobold, noitalics, nounderscore]▐#[fg=colour235, bg=colour246] $USER@#h "
# set-option -g status-right "#[fg=colour239, bg=colour237, nobold, nounderscore, noitalics]▐#[fg=colour246, bg=colour239] #(show-short-dir \"#{pane_current_path}\" \"#{client_width}\") #[fg=colour246, bg=colour239, nobold, noitalics, nounderscore]▐#[fg=colour235, bg=colour246] $USER@#h "
#
# # Straight (current)
# set-window-option -g window-status-current-format "#[fg=colour237, bg=colour246, nobold, noitalics, nounderscore]▌#[fg=colour235, bg=colour246] #I▕#[fg=colour235, bg=colour246, bold] #W #[fg=colour246, bg=colour237, nobold, noitalics, nounderscore]▌"
# set-window-option -g window-status-format "#[fg=colour237, bg=colour239, nobold, noitalics, nounderscore]▌#[fg=colour246,bg=colour239] #I▕#[fg=colour246, bg=colour239] #W #[fg=colour239, bg=colour237, noitalics]▌"


#############
#  PLUGINS  #
#############

set-option -g @plugin 'tmux-plugins/tpm'
set-option -g @plugin 'tmux-plugins/tmux-sensible'
set-option -g @plugin 'tmux-plugins/tmux-resurrect'
set-option -g @plugin 'tmux-plugins/tmux-continuum'
#set-option -g @plugin 'tmux-plugins/tmux-copycat'
#set-option -g @plugin 'tmux-plugins/tmux-yank'
set-option -g @plugin 'NHDaly/tmux-better-mouse-mode'
set-option -g @plugin 'tmux-plugins/vim-tmux-focus-events'

# plugin settings
set-option -g @continuum-boot                               'on'
#set-option -g @continuum-systemd-start-cmd                  'new-session -d -s main'
set-option -g @resurrect-strategy-vim                       'session'
set-option -g @continuum-restore                            'on'
set-option -g @continuum-save-interval                      '1'

set-option -g @scroll-down-exit-copy-mode                   'on'
set-option -g @scroll-without-changing-pane                 'on'
set-option -g @scroll-in-moused-over-pane                   'on'
set-option -g @scroll-speed-num-lines-per-scroll            '1'
set-option -g @emulate-scroll-for-no-mouse-alternate-buffer 'on'

# initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run-shell '~/.tmux/plugins/tpm/tpm'
